/*  5-60-ESP32_sketch
 *
 * Components
 * ----------
 *  - Arduino Nano 33 IoT
 *  - 1.3" OLED I2C SH1106
 *  - BME280 I2C
 *  - Button
 *  - Potentiometer
 *  - LED
 *
 *  Libraries
 *  ---------
 *  - TaskScheduler.h
 *  - TaskSchedulerDeclarations.h
 *  - TaskSchedulerSleepMethods.h
 *  - Adafruit_BME280.h
 *  - U8g2lib.h
 *
 * Connections
 * -----------
 *
 * See https://github.com/futureshocked/arduino_iot_cloud/blob/main/Wiring%20Schematics/ESP32%20experiment.png
 *
 *
 *  Created on March 4 2022 by Peter Dalmaris
 *
 */

// U8g2 - Version: Latest
#include <U8g2lib.h>

// Adafruit BME280 Library - Version: Latest
#include <Adafruit_BME280.h>

// TaskScheduler - Version: Latest
#include <TaskScheduler.h>
#include <TaskSchedulerDeclarations.h>
#include <TaskSchedulerSleepMethods.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "ESP32 with OLED v2"
  https://create.arduino.cc/cloud/things/d3af5f4f-35bf-45b5-bb23-e253d822f301

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message_one;
  float humidity;
  float pressure;
  float temperature;
  int led_pwm;
  bool button;
  bool led_on_off;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define SEALEVELPRESSURE_HPA (1013.25)

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

Adafruit_BME280 bme; // I2C

const byte led_orange  = 32; // the PWM pin the LED is attached to
const byte led_red     = 18;
const byte BUTTON_GPIO = 35;

Scheduler runner;

void get_button_state();
void get_sensor_readings();

Task call_button_readings(100, TASK_FOREVER, &get_button_state);
Task call_sensor_readings(5000, TASK_FOREVER, &get_sensor_readings);

void get_sensor_readings() {
  printValues();
}

void get_button_state() {
  button = digitalRead(BUTTON_GPIO);
  Serial.print("button:");
  Serial.println(button);
  printValues();
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  pinMode(led_orange,OUTPUT); // Set the LED pin as an output
  pinMode(led_red,OUTPUT); // Set the LED pin as an output
  pinMode(BUTTON_GPIO,INPUT);

  ledcAttachPin(led_orange, 0); // assign a led pins to a PWM channel, learn: https://techexplorations.com/guides/esp32/begin/pwm/
  ledcSetup(0, 4000, 8); // 4 kHz PWM, 8-bit resolution

  unsigned status;
  status = bme.begin(0x76);
  if (!status) {
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),16);
        Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
        Serial.print("   ID of 0x56-0x58 represents a BMP 280,\n");
        Serial.print("        ID of 0x60 represents a BME 280.\n");
        Serial.print("        ID of 0x61 represents a BME 680.\n");
        while (1) delay(10);
    }

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  u8g2.begin();
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_helvB18_tf);
  u8g2.drawStr(0, 30,"Starting...");
  u8g2.sendBuffer();

  // Add tasks to runner
  runner.addTask(call_button_readings);
  runner.addTask(call_sensor_readings);

  // Enable the tasks
  call_button_readings.enable();
  call_sensor_readings.enable();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  runner.execute();
}

/*
  Since MessageOne is READ_WRITE variable, onMessageOneChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageOneChange()  {
  // Add your code here to act upon MessageOne change
  update_oled();
}
/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}
/*
  Since Pressure is READ_WRITE variable, onPressureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPressureChange()  {
  // Add your code here to act upon Pressure change
}
/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}
/*
  Since LedPwm is READ_WRITE variable, onLedPwmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedPwmChange()  {
  // Add your code here to act upon LedPwm change
  ledcWrite(0, led_pwm); // set the brightness of the LED
  Serial.println(led_pwm);
}
/*
  Since Button is READ_WRITE variable, onButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onButtonChange()  {
  // Add your code here to act upon Button change
}
/*
  Since LedOnOff is READ_WRITE variable, onLedOnOffChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedOnOffChange()  {
  // Add your code here to act upon LedOnOff change
  if (led_on_off){
    digitalWrite(led_red, HIGH);
    Serial.println("Button ON");
  } else
  {
    digitalWrite(led_red, LOW);
    Serial.println("Button OFF");
  }
}

void update_oled()
{
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_luRS10_tf);
  u8g2.setFontPosTop();

  u8g2.setCursor(1, 5);
  u8g2.print(String(temperature) + (char)176 + "C");

  u8g2.setCursor(65, 5);
  u8g2.print(String(humidity) + "%");

  u8g2.setCursor(1, 40);
  u8g2.print(message_one);

  u8g2.setCursor(1, 25);
  u8g2.print(String(pressure) + "hPa");

  u8g2.setCursor(110, 25);
    if (button)
      u8g2.print("O");
    else
      u8g2.print("|");
  u8g2.sendBuffer();
}

void printValues() {
    Serial.print("Temperature = ");
    Serial.print(bme.readTemperature());
    Serial.println(" °C");
    temperature = bme.readTemperature(); // This will update the dashboard widget

    Serial.print("Pressure = ");
    Serial.print(bme.readPressure() / 100.0F);
    Serial.println(" hPa");
    pressure = bme.readPressure() / 100.0F; // This will update the dashboard widget

    Serial.print("Approx. Altitude = ");
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
    Serial.println(" m");

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");
    humidity = bme.readHumidity(); // This will update the dashboard widget

    Serial.println();
    update_oled();
}
