/*  6-20-MKR1010_spacialized_types
 *
 * Components
 * ----------
 *  - Arduino MKR1010
 *  - MKR ENV Shield
 *
 *  Libraries
 *  ---------
 *  - Arduino_MKRENV.h
 *
 * Connections
 * -----------
 *
 * None
 *
 *
 *  Created on March 4 2022 by Peter Dalmaris
 *
 */

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/9ef69d98-5ef9-44de-bee2-b210a2666df5

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature;
  CloudLuminance illuminance;
  CloudRelativeHumidity humidity;
  CloudPressure pressure;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRENV.h>

long previousMillis = 0;
long interval = 1000;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV shield!");
    while (1);
  }

}

void loop() {
  ArduinoCloud.update();
  // Your code here

  unsigned long currentMillis = millis();
  if(currentMillis - previousMillis > interval) {
    previousMillis = currentMillis;
    printValues();
  }
}

void printValues()
{
  // read all the sensor values
  temperature  = ENV.readTemperature();
  humidity     = ENV.readHumidity();
  pressure     = ENV.readPressure();
  illuminance  = ENV.readIlluminance();

  Serial.print("millis = ");
  Serial.print(millis());
  Serial.println(" ms");

  // print each of the sensor values
  Serial.print("Temperature = ");
  Serial.print(temperature);
  Serial.println(" °C");

  Serial.print("Humidity    = ");
  Serial.print(humidity);
  Serial.println(" %");

  Serial.print("Pressure    = ");
  Serial.print(pressure);
  Serial.println(" kPa");

  Serial.print("Illuminance = ");
  Serial.print(illuminance);
  Serial.println(" lx");

  // print an empty line
  Serial.println("");
  Serial.println("");

}

/*
  Since Uv is READ_WRITE variable, onUvChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUvChange()  {
  // Add your code here to act upon Uv change
}
/*
  Since Light is READ_WRITE variable, onLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightChange()  {
  // Add your code here to act upon Light change
}
/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}
/*
  Since Pressure is READ_WRITE variable, onPressureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPressureChange()  {
  // Add your code here to act upon Pressure change
}

/*
  Since UvA is READ_WRITE variable, onUvAChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUvAChange()  {
  // Add your code here to act upon UvA change
}

/*
  Since UvB is READ_WRITE variable, onUvBChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUvBChange()  {
  // Add your code here to act upon UvB change
}

/*
  Since UvIndex is READ_WRITE variable, onUvIndexChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUvIndexChange()  {
  // Add your code here to act upon UvIndex change
}

/*
  Since Illuminance is READ_WRITE variable, onIlluminanceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIlluminanceChange()  {
  // Add your code here to act upon Illuminance change
}
