/*  6-40-MKR1010_servo_relay_display
 *
 * Components
 * ----------
 *  - Arduino MKR1010
 *  - MKR Connector Carrier
 *  - 3.3V Grove relay to D1
 *  - Mini Grove analogue servo motor to D2
 *  - 0.54" Grove Quad Alphanumeric LED display to TWI
 *
 *  Libraries
 *  ---------
 *  - grove_alphanumeric_display.h
 *  - Servo.h
 *
 * Connections
 * -----------
 *
 * None
 *
 *
 *  Created on March 4 2022 by Peter Dalmaris
 *
 */

/*
  Sketch generated by the Arduino IoT Cloud Thing "MKR_servo_relay_display"
  https://create.arduino.cc/cloud/things/5e9e9e68-474f-4d23-b396-4266a084494a

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float synced_temperature;
  int servo_1;
  bool mkr_button;
  bool relay_1;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Servo.h>
#include "grove_alphanumeric_display.h"

Servo myservo;
Seeed_Digital_Tube tube;

byte relay_1_pin = 1;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  pinMode(relay_1_pin,OUTPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  myservo.attach(2);
  Wire.begin(); //Join I2C bus

  tube.setTubeType(TYPE_4, TYPE_4_DEFAULT_I2C_ADDR);

  tube.setBrightness(15);
  tube.setBlinkRate(BLINK_OFF);
  tube.displayString("STRT", 500);

  delay(1000);
}

void loop() {
  ArduinoCloud.update();
  // Your code here
}

/*
  Since Servo1 is READ_WRITE variable, onServo1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onServo1Change()  {
  // Add your code here to act upon Servo1 change
  myservo.write(servo_1);
  tube.displayNum(servo_1);
  delay(15);
}
/*
  Since Relay1 is READ_WRITE variable, onRelay1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onRelay1Change()  {
  // Add your code here to act upon Relay1 change
  digitalWrite(relay_1_pin,relay_1);
}

/*
  Since SyncedTemperature is READ_WRITE variable, onSyncedTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSyncedTemperatureChange()  {
  // Add your code here to act upon SyncedTemperature change
}

/*
  Since MkrButton is READ_WRITE variable, onMkrButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMkrButtonChange()  {
  // Add your code here to act upon MkrButton change
  if (mkr_button)
    digitalWrite(relay_1_pin,LOW);
  else
    digitalWrite(relay_1_pin,HIGH);
}
